import { Configuration, OpenAIApi } from "openai";
import express from "express";
import cors from "cors";
import dotenv from "dotenv";
dotenv.config();

const config = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});

const app = express();
app.use(cors());
app.use(express.json());
const port = 8080;

app.post("/api/ai/topics", async (req, res) => {
  const { requirement } = req.body;
  const answer = await getTopics(requirement);
  const answerWithPrefix = `----Generated by AI----\n${answer}\n----End of AI generated text----`;
  res.send({ answer: answerWithPrefix });
});

app.post("/api/ai/functional", async (req, res) => {
  const { requirement } = req.body;
  const answer = await isFunctional(requirement);
  res.send({ answer });
});

// app.post("/api/ai/image", async (req, res) => {
//   const { text } = req.body;
//   console.log(text);
//   const answer = await generateImage(text);
//   res.send({ answer });
// });

app.listen(port, () => {
  console.log(`Example app listening at http://localhost:${port}`);
});

async function getTopics(requirement) {
  const openai = new OpenAIApi(config);
  try {
    const completion = await openai.createChatCompletion({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "user",
          content: `Write 3-4 topics, each with one line that helps the user defining the following requirement: ${requirement}.`,
        },
      ],
      max_tokens: 200,
    });

    return completion.data.choices[0].message?.content;
  } catch (error) {
    console.log(error);
  }
}


// check if the requirement is functional or non-functional
async function isFunctional(requirement) {
  const openai = new OpenAIApi(config);
  try {
    const completion = await openai.createChatCompletion({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "user",
          content: `The following requiremtent is functional or non-functional? 
          Answer with "functional" or "non-functional". ${requirement}`,
        },
      ],
      max_tokens: 200,
    });

    return completion;
  } catch (error) {
    console.log(error);
  }
}

// function to generate an image from a text
// async function generateImage(text) {
//   const openai = new OpenAIApi(config);
//   try {
//     const response = await openai.createImage({
//       prompt: text,
//       n: 1,
//       size: "512x512"
//     })
//     return response.data.data;
//   } catch (error) {
//     console.log(error);
//     // return 400
//     return error;
//   }
// }
